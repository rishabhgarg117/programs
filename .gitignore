#include <stdio.h>
#include <math.h>

// Function to perform Jump Search
void jumpSearch(int arr[], int n, int key) {
    int step = sqrt(n); // Define the step size
    int prev = 0;
    int comparisons = 1;

    // Finding the block where the element is present (if present)
    while (arr[fmin(step, n) - 1] < key) {
        prev = step;
        step += sqrt(n);
        comparisons++;
        if (prev >= n) {
            printf("Not Present\n");
            printf("Comparisons: %d\n", comparisons);
            return;
        }
    }

    // Performing linear search in the identified block
    while (arr[prev] < key) {
        prev++;
        comparisons++;
        if (prev == fmin(step, n)) {
            printf("Not Present\n");
            printf("Comparisons: %d\n", comparisons);
            return;
        }
    }

    // If key is found
    if (arr[prev] == key) {
        printf("Present\n");
        printf("Comparisons: %d\n", comparisons);
    } else {
        printf("Not Present\n");
        printf("Comparisons: %d\n", comparisons);
    }
}

int main() {
    int T;
    scanf("%d", &T); // Input number of test cases

    for(int j=0; j<T; j++) 
    {
        int n;
        scanf("%d", &n); // Input size of array
        int arr[n];
        for (int i = 0; i < n; ++i) {
            scanf("%d", &arr[i]); // Input array elements
        }
        int key;
        scanf("%d", &key); // Input key element

        // Perform Jump Search and print the result
        jumpSearch(arr, n, key);
    }

    return 0;
}

